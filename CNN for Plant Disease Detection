import tensorflow as tf

from tensorflow.keras.applications import DenseNet201
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D


base_model = DenseNet201(weights='imagenet', include_top=False)
base_model.trainable = True

model = Sequential()
model.add(base_model)
model.add(GlobalAveragePooling2D())
model.add(Dense(38, activation='softmax'))

model.compile(optimizer='adam',loss='categorical_crossentropy', metrics=['accuracy'])

! pip install kaggle
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
! kaggle datasets download -d vipoooool/new-plant-diseases-dataset

from zipfile import ZipFile
dataset = '/content/new-plant-diseases-dataset.zip'
with ZipFile(dataset,'r') as zip:
  zip.extractall()

model.summary()

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(
    rescale=1./255,
)
test_datagen = ImageDataGenerator(
    rescale=1./255,
)

batch_size = 32
train_generator = train_datagen.flow_from_directory(
    '/content/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)/train',
    target_size=(224, 224),
    batch_size=batch_size,
    class_mode='categorical'
)

validation_generator = test_datagen.flow_from_directory(
    '/content/new plant diseases dataset(augmented)/New Plant Diseases Dataset(Augmented)/valid',
    target_size=(224, 224),
    batch_size=batch_size,
    class_mode='categorical'
)

history=model.fit_generator(
    train_generator,
    steps_per_epoch= 32,
    epochs=20,
    validation_data= validation_generator,
    validation_steps= 32,
)

import matplotlib.pyplot as plt
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Model Accuracy Over Epochs')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

import cv2
import numpy as np
img = cv2.imread('/content/test/test/PotatoEarlyBlight1.JPG')
plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
plt.show

pre=model.predict(np.expand_dims(resize/225,0))
plt.figure(figsize=(10, 6))
plt.bar(range(len(pre[0])), pre[0])
plt.title('Softmax Output')
plt.xlabel('Class')
plt.ylabel('Probability')
plt.show()


